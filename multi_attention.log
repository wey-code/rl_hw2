pygame 2.1.0 (SDL 2.0.16, Python 3.8.0)
Hello from the pygame community. https://www.pygame.org/contribute.html
Traceback (most recent call last):
  File "./agent.py", line 486, in <module>
    args = parse_args(args)
  File "./agent.py", line 240, in parse_args
    parser.add_argument('--normal', default=True, action='store_flase')
  File "/home/slc/miniconda3/envs/RL2/lib/python3.8/argparse.py", line 1367, in add_argument
    raise ValueError('unknown action "%s"' % (action_class,))
ValueError: unknown action "store_flase"
pygame 2.1.0 (SDL 2.0.16, Python 3.8.0)
Hello from the pygame community. https://www.pygame.org/contribute.html
Successfully set seed to 2
MultiAttentionNetwork(
  (features): Sequential(
    (0): Conv2d(4, 32, kernel_size=(8, 8), stride=(4, 4))
    (1): ReLU()
    (2): Conv2d(32, 64, kernel_size=(4, 4), stride=(2, 2))
    (3): ReLU()
    (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))
    (5): ReLU()
  )
  (attention): NONLocalBlock2D(
    (g): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
    (W): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
    (theta): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
    (phi): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
  )
  (advantage): Sequential(
    (0): Linear(in_features=68224, out_features=512, bias=True)
    (1): ReLU()
    (2): Linear(in_features=512, out_features=5, bias=True)
  )
  (value): Sequential(
    (0): Linear(in_features=68224, out_features=512, bias=True)
    (1): ReLU()
    (2): Linear(in_features=512, out_features=1, bias=True)
  )
  (output): None
  (ego_embedding): Sequential(
    (0): Linear(in_features=7, out_features=64, bias=True)
    (1): ReLU()
    (2): Linear(in_features=64, out_features=64, bias=True)
    (3): ReLU()
  )
  (others_embedding): Sequential(
    (0): Linear(in_features=7, out_features=64, bias=True)
    (1): ReLU()
    (2): Linear(in_features=64, out_features=64, bias=True)
    (3): ReLU()
  )
  (attention_layer): EgoAttetion(
    (value_all): Linear(in_features=64, out_features=64, bias=False)
    (key_all): Linear(in_features=64, out_features=64, bias=False)
    (query_ego): Linear(in_features=64, out_features=64, bias=False)
    (attention_combine): Linear(in_features=64, out_features=64, bias=False)
  )
  (decoder): Sequential(
    (0): Linear(in_features=64, out_features=64, bias=True)
    (1): ReLU()
    (2): Linear(in_features=64, out_features=64, bias=True)
    (3): ReLU()
  )
)
./agent.py:220: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755903507/work/torch/csrc/utils/tensor_new.cpp:210.)
  return (torch.tensor([state['kinematics']], dtype=torch.float), state_image)
Ep: 0 | Ep_r: 4.7 | t_so_far: {6} | epsilon: 0.101 max: 4.7
